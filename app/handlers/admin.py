from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from app.ui.states import AdminStates

router = Router()


@router.callback_query(F.data == "admin")
async def cb_admin(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    await botmod._safe_cb_answer(cb)
    rows = [
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –∞–¥–º–∏–Ω–∞", switch_inline_query_current_chat="ADM ")],
        [InlineKeyboardButton(text="üë• –ü—Ä–æ–¥–∞–≤—Ü—ã", callback_data="admin_sellers")],
        [InlineKeyboardButton(text="üë§ –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="admin_reg_requests")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify")],
        [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="reports")],
        [InlineKeyboardButton(text="üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞", callback_data="supply")],
    ]
    if botmod.is_super_admin(cb.from_user.id, cb.from_user.username):
        rows.insert(1, [InlineKeyboardButton(text="üõ°Ô∏è –ê–¥–º–∏–Ω—ã", callback_data="admin_admins")])
    rows.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="home")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    try:
        await cb.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)
    except Exception:
        await cb.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)


@router.callback_query(F.data == "admin_reg_requests")
async def admin_reg_requests(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    await botmod._safe_cb_answer(cb)
    conn = botmod.db()
    rows = conn.execute(
        "SELECT id, tg_id, COALESCE(first_name,'') AS fn, COALESCE(last_name,'') AS ln, COALESCE(username,'') AS un, created_at FROM registration_request WHERE status='pending' ORDER BY id DESC LIMIT 50"
    ).fetchall()
    conn.close()
    if not rows:
        try:
            await cb.message.edit_text(
                "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin")]]),
            )
        except Exception:
            await cb.message.answer(
                "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin")]]),
            )
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{(r['fn']+' '+r['ln']).strip() or r['un'] or str(r['tg_id'])}", callback_data=f"admin_reg_pick|{int(r['tg_id'])}")] for r in rows
        ] + [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin")]]
    )
    try:
        await cb.message.edit_text("–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø:", reply_markup=kb)
    except Exception:
        await cb.message.answer("–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø:", reply_markup=kb)


@router.callback_query(F.data.startswith("admin_reg_pick|"))
async def admin_reg_pick(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    try:
        _, uid_s = cb.data.split("|", 1)
        uid = int(uid_s)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", show_alert=True)
        return
    conn = botmod.db()
    row = conn.execute(
        "SELECT id, tg_id, COALESCE(first_name,'') AS fn, COALESCE(last_name,'') AS ln, COALESCE(username,'') AS un, created_at FROM registration_request WHERE status='pending' AND tg_id=? ORDER BY id DESC LIMIT 1",
        (uid,),
    ).fetchone()
    conn.close()
    if not row:
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
    name = (row["fn"] + " " + row["ln"]).strip() or row["un"] or str(row["tg_id"])
    text = (
        f"–ó–∞—è–≤–∫–∞ –æ—Ç: {name}\n"
        f"Username: {row['un'] or '‚Äî'}\n"
        f"ID: {row['tg_id']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"reg_approve|{uid}|admin")],
        [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=f"reg_approve|{uid}|seller")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reg_reject|{uid}")],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_reg_requests")],
    ])
    try:
        await cb.message.edit_text(text, reply_markup=kb)
    except Exception:
        await cb.message.answer(text, reply_markup=kb)


@router.callback_query(F.data == "admin_admins")
async def admin_admins(cb: CallbackQuery):
    import marm_bot as botmod
    if not botmod.is_super_admin(cb.from_user.id, cb.from_user.username):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)", show_alert=True)
        return
    await botmod._safe_cb_answer(cb)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_admin_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_admin_del")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_admin_list")],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin")],
    ])
    try:
        await cb.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=kb)
    except Exception:
        await cb.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=kb)


@router.callback_query(F.data == "admin_sellers")
async def admin_sellers(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    await botmod._safe_cb_answer(cb)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data="admin_seller_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data="admin_seller_del")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data="admin_seller_rename")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callback_data="admin_seller_list")],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin")],
    ])
    try:
        await cb.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏:", reply_markup=kb)
    except Exception:
        await cb.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏:", reply_markup=kb)


@router.callback_query(F.data == "admin_seller_add")
async def admin_seller_add(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    await state.set_state(botmod.AdminStates.wait_seller_add)
    await cb.message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–õ–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Ç—ç–≥ (@username)")
    await cb.answer()


@router.message(AdminStates.wait_seller_add, F.forward_from)
async def on_admin_seller_add_forward(m: Message, state: FSMContext):
    import marm_bot as botmod
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è; —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    st = await state.get_state()
    if st != botmod.AdminStates.wait_seller_add.state:
        return
    if not botmod.is_admin(m.from_user.id, m.from_user.username):
        return
    if m.forward_from:
        fid = m.forward_from.id
        uname = botmod._norm_username(m.forward_from.username)
        conn = botmod.db()
        with conn:
            conn.execute(
                "INSERT OR IGNORE INTO user_role(tg_id, username, role) VALUES (?,?, 'seller')",
                (fid, uname),
            )
        conn.close()
        await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é: id={fid} {uname or ''}")
        await state.clear()


@router.message(AdminStates.wait_seller_add, F.text)
async def on_admin_seller_add_text(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminStates.wait_seller_add.state:
        return
    if not botmod.is_admin(m.from_user.id, m.from_user.username):
        await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
        return
    tag = botmod._norm_username(m.text)
    if not tag or not tag.startswith("@") or len(tag) < 2:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç—ç–≥. –£–∫–∞–∂–∏—Ç–µ @username")
        return
    conn = botmod.db()
    with conn:
        conn.execute("INSERT OR IGNORE INTO user_role(username, role) VALUES (?, 'seller')", (tag,))
    conn.close()
    await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü: {tag}")
    await state.clear()


@router.callback_query(F.data == "admin_seller_del")
async def admin_seller_del(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    await botmod._safe_cb_answer(cb)
    # Show list of sellers to tap and delete
    conn = botmod.db()
    rows = conn.execute(
        "SELECT id, COALESCE(display_name, COALESCE(username,'')) AS nm FROM user_role WHERE role='seller' ORDER BY nm"
    ).fetchall()
    conn.close()
    if not rows:
        await cb.answer("–ù–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", show_alert=True)
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=str(r["nm"]) or "(–±–µ–∑ –∏–º–µ–Ω–∏)", callback_data=f"admin_seller_del_pick|{int(r['id'])}")] for r in rows
        ] + [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_sellers")]]
    )
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    except Exception:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.message(AdminStates.wait_seller_del, F.text)
async def on_admin_seller_del_text(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminStates.wait_seller_del.state:
        return
    if not botmod.is_admin(m.from_user.id, m.from_user.username):
        await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    tag = botmod._norm_username(m.text)
    if not tag or not tag.startswith("@"):
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç—ç–≥. –£–∫–∞–∂–∏—Ç–µ @username")
        return
    conn = botmod.db()
    with conn:
        conn.execute("DELETE FROM user_role WHERE role='seller' AND LOWER(username)=?", (tag,))
    conn.close()
    await m.answer(f"–£–¥–∞–ª—ë–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü: {tag}")
    await state.clear()


@router.callback_query(F.data.startswith("admin_seller_del_pick|"))
async def admin_seller_del_pick(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    try:
        _, sid = cb.data.split("|", 1)
        sid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", show_alert=True)
        return
    conn = botmod.db()
    row = conn.execute(
        "SELECT id, COALESCE(display_name, COALESCE(username,'')) AS nm FROM user_role WHERE id=? AND role='seller'",
        (sid,),
    ).fetchone()
    conn.close()
    if not row:
        await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    name = row["nm"] or "(–±–µ–∑ –∏–º–µ–Ω–∏)"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_seller_del_confirm|{sid}"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_sellers")]
    ])
    try:
        await cb.message.edit_text(f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞: {name}?", reply_markup=kb)
    except Exception:
        await cb.message.answer(f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞: {name}?", reply_markup=kb)


@router.callback_query(F.data.startswith("admin_seller_del_confirm|"))
async def admin_seller_del_confirm(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    try:
        _, sid = cb.data.split("|", 1)
        sid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", show_alert=True)
        return
    conn = botmod.db()
    with conn:
        conn.execute("DELETE FROM user_role WHERE id=? AND role='seller'", (sid,))
    conn.close()
    try:
        await cb.message.edit_text("–ü—Ä–æ–¥–∞–≤–µ—Ü —É–¥–∞–ª—ë–Ω ‚úÖ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_sellers")]]))
    except Exception:
        await cb.message.answer("–ü—Ä–æ–¥–∞–≤–µ—Ü —É–¥–∞–ª—ë–Ω ‚úÖ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_sellers")]]))
    await cb.answer()


@router.callback_query(F.data == "admin_seller_list")
async def admin_seller_list(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    conn = botmod.db()
    rows = conn.execute(
        "SELECT COALESCE(username,'' ) AS uname, COALESCE(display_name,'') AS dname, COALESCE(tg_id,'') AS tid FROM user_role WHERE role='seller' ORDER BY COALESCE(display_name, username)"
    ).fetchall()
    conn.close()
    if not rows:
        await cb.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", show_alert=True)
        return
    def _nm(r):
        dn = (r['dname'] or '').strip()
        un = (r['uname'] or '').strip()
        disp = dn or un or '(–±–µ–∑ –∏–º–µ–Ω–∏)'
        if un and dn and dn != un:
            disp = f"{dn} ({un})"
        return disp
    lines = [f"‚Ä¢ {_nm(r)} {('['+str(r['tid'])+']') if r['tid'] else ''}" for r in rows]
    await cb.message.edit_text(
        "–ü—Ä–æ–¥–∞–≤—Ü—ã:\n" + "\n".join(lines[: 4000 // 30]),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_sellers")]]
        ),
    )
    await cb.answer()


@router.callback_query(F.data == "admin_seller_rename")
async def admin_seller_rename(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    await botmod._safe_cb_answer(cb)
    conn = botmod.db()
    rows = conn.execute("SELECT DISTINCT COALESCE(tg_id,0) AS tid, COALESCE(display_name, COALESCE(username,'')) AS nm FROM user_role WHERE role='seller' AND tg_id IS NOT NULL ORDER BY nm").fetchall()
    conn.close()
    if not rows:
        await cb.answer("–ù–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", show_alert=True); return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(r['nm']), callback_data=f"admin_seller_rename_pick|{int(r['tid'])}")] for r in rows
    ] + [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_sellers")]])
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    except Exception:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", reply_markup=kb)


@router.callback_query(F.data.startswith("admin_seller_rename_pick|"))
async def admin_seller_rename_pick(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    tid = int(cb.data.split("|", 1)[1])
    await state.update_data(rename_tid=tid)
    await state.set_state(botmod.AdminStates.wait_seller_rename_name)
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç—á—ë—Ç–æ–≤")
    await cb.answer()


@router.message(AdminStates.wait_seller_rename_name, F.text)
async def admin_seller_rename_name(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminStates.wait_seller_rename_name.state:
        return
    if not botmod.is_admin(m.from_user.id, m.from_user.username):
        return
    data = await state.get_data(); tid = int(data.get('rename_tid'))
    new_name = (m.text or '').strip()
    if not new_name:
        await m.answer("–ò–º—è –ø—É—Å—Ç–æ–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return
    conn = botmod.db()
    with conn:
        conn.execute("UPDATE user_role SET display_name=? WHERE role='seller' AND tg_id=?", (new_name, tid))
    conn.close()
    await m.answer("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
    await state.clear()


@router.callback_query(F.data == "admin_admin_add")
async def admin_admin_add(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not botmod.is_super_admin(cb.from_user.id, cb.from_user.username):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await state.set_state(botmod.AdminStates.wait_admin_add)
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—ç–≥ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ (@username)")
    await cb.answer()


@router.message(AdminStates.wait_admin_add, F.forward_from)
async def on_admin_admin_add_forward(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminStates.wait_admin_add.state:
        return
    if not botmod.is_super_admin(m.from_user.id, m.from_user.username):
        return
    if m.forward_from:
        fid = m.forward_from.id
        uname = botmod._norm_username(m.forward_from.username)
        conn = botmod.db()
        with conn:
            conn.execute(
                "INSERT OR IGNORE INTO user_role(tg_id, username, role) VALUES (?,?, 'admin')",
                (fid, uname),
            )
        conn.close()
        await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é: id={fid} {uname or ''}")
        await state.clear()
    else:
        await m.answer(
            "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ @—Ç–µ–≥."
        )


@router.message(AdminStates.wait_admin_add, F.text)
async def on_admin_admin_add_text(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminStates.wait_admin_add.state:
        return
    if not botmod.is_super_admin(m.from_user.id, m.from_user.username):
        await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    tag = botmod._norm_username(m.text)
    if not tag or not tag.startswith("@"):
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç—ç–≥. –£–∫–∞–∂–∏—Ç–µ @username")
        return
    conn = botmod.db()
    with conn:
        conn.execute("INSERT OR IGNORE INTO user_role(username, role) VALUES (?, 'admin')", (tag,))
    conn.close()
    await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: {tag}")
    await state.clear()


@router.callback_query(F.data == "admin_admin_del")
async def admin_admin_del(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not botmod.is_super_admin(cb.from_user.id, cb.from_user.username):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await state.set_state(botmod.AdminStates.wait_admin_del)
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—ç–≥ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (@username)")
    await cb.answer()


@router.message(AdminStates.wait_admin_del, F.text)
async def on_admin_admin_del_text(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminStates.wait_admin_del.state:
        return
    if not botmod.is_super_admin(m.from_user.id, m.from_user.username):
        await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    tag = botmod._norm_username(m.text)
    if not tag or not tag.startswith("@"):
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç—ç–≥. –£–∫–∞–∂–∏—Ç–µ @username")
        return
    if tag.lower() == botmod.SUPER_ADMIN_USERNAME.lower():
        await m.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
        return
    conn = botmod.db()
    with conn:
        conn.execute("DELETE FROM user_role WHERE role='admin' AND LOWER(username)=?", (tag,))
    conn.close()
    await m.answer(f"–£–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω: {tag}")
    await state.clear()


@router.callback_query(F.data == "admin_admin_list")
async def admin_admin_list(cb: CallbackQuery):
    import marm_bot as botmod
    if not botmod.is_super_admin(cb.from_user.id, cb.from_user.username):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    conn = botmod.db()
    rows = conn.execute(
        "SELECT COALESCE(username,'' ) AS uname, COALESCE(tg_id,'') AS tid FROM user_role WHERE role='admin' ORDER BY uname"
    ).fetchall()
    conn.close()
    if not rows:
        await cb.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", show_alert=True)
        return
    lines = [f"‚Ä¢ {r['uname'] or '(–±–µ–∑ —Ç–µ–≥–∞)'} {('['+str(r['tid'])+']') if r['tid'] else ''}" for r in rows]
    await cb.message.edit_text(
        "–ê–¥–º–∏–Ω—ã:\n" + "\n".join(lines[: 4000 // 30]),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_admins")]]
        ),
    )
    await cb.answer()
