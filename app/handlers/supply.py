from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext

router = Router()


@router.callback_query(F.data == "supply")
async def cb_supply(cb: CallbackQuery):
    import app.bot as botmod
    if not await botmod.require_admin(cb):
        return
    await botmod._safe_cb_answer(cb)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", callback_data="supply_upload")],
        [InlineKeyboardButton(text="üóÇÔ∏è –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö", callback_data="supply_list|1")],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin")]
    ])
    await cb.message.edit_text("–ü–æ—Å—Ç–∞–≤–∫–∞: –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—á—ë—Ç –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=kb)
    await cb.answer()


@router.callback_query(F.data == "supply_upload")
async def cb_supply_upload(cb: CallbackQuery, state: FSMContext):
    import app.bot as botmod
    await botmod._safe_cb_answer(cb)
    await state.update_data(expect_excel=True)
    await cb.message.edit_text(
        (
            "–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ CSV.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ CSV: https://convertio.co/ru/xls-csv/\n\n"
            "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è .csv ‚Äî –º—ã –µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º."
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="supply")],
        ]),
    )
    await cb.answer()


@router.message(F.document)
async def on_document(m: Message, state: FSMContext):
    import asyncio
    import app.bot as botmod

    data = await state.get_data()
    if not data.get("expect_excel"):
        return
    file = m.document
    lower = file.file_name.lower()
    if not lower.endswith(".csv"):
        await m.answer(
            (
                "–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ CSV.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ CSV: https://convertio.co/ru/xls-csv/"
            )
        )
        return
    dest = botmod.UPLOAD_DIR / file.file_name
    await m.bot.download(file, destination=dest)

    norm_csv = None
    conv_info = ""
    norm_csv, norm_stats = await asyncio.to_thread(botmod.csv_to_normalized_csv, str(dest))
    conv_info = f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {norm_stats.get('found',0)}\n"
    if norm_stats.get('errors'):
        conv_info += "–û—à–∏–±–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:\n" + "\n".join("‚Ä¢ "+e for e in norm_stats['errors']) + "\n"

    if not norm_csv:
        text = (
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏.\n"
            + conv_info
            + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ CSV (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—ã—à–µ)."
        )
        await m.answer(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="supply")],
                ]
            ),
        )
        await state.clear()
        return

    stats = await asyncio.to_thread(botmod.import_supply_from_normalized_csv, norm_csv)
    text = (
        f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
        f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['imported']}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {stats['created']}\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}\n"
    )
    text += conv_info
    if norm_csv:
        text += f"–§–∞–π–ª CSV: {norm_csv}\n"
    if stats["errors"]:
        text += "–û—à–∏–±–∫–∏:\n" + "\n".join("‚Ä¢ " + e for e in stats["errors"])
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóÇÔ∏è –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö", callback_data="supply_list|1")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="supply")],
        ]
    )
    await m.answer(text, reply_markup=kb)
    try:
        to_skl_map = stats.get("to_skl", {}) or {}
        for pid, tot in to_skl_map.items():
            if tot and float(tot) > 0:
                await botmod._notify_instant_to_skl(m.bot, int(pid), "SKL-0", float(tot))
    except Exception:
        pass
    await state.clear()


@router.callback_query(F.data.startswith("supply_list|"))
async def supply_list(cb: CallbackQuery):
    import app.bot as botmod
    _, page_s = cb.data.split("|", 1)
    page = max(1, int(page_s))
    conn = botmod.db()
    kb = botmod.kb_supply_page(conn, page)
    conn.close()
    await cb.message.edit_text("–ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=kb)
    await botmod._safe_cb_answer(cb)
