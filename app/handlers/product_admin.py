from __future__ import annotations

import html
from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.ui.states import AdminEdit

router = Router()


@router.callback_query(F.data.startswith("admin_edit|"))
async def admin_edit_menu(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    _, pid_s = cb.data.split("|", 1)
    pid = int(pid_s)
    conn = botmod.db()
    r = conn.execute(
        "SELECT article, name, local_name, brand_country FROM product WHERE id=?",
        (pid,),
    ).fetchone()
    conn.close()
    if not r:
        await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    b = InlineKeyboardBuilder()
    b.button(text="‚úèÔ∏è –ê—Ä—Ç–∏–∫—É–ª", callback_data=f"admin_edit_field|{pid}|article")
    b.button(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_edit_field|{pid}|name")
    b.button(text="‚úèÔ∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è", callback_data=f"admin_edit_field|{pid}|local_name")
    b.button(text="‚úèÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å/—Å—Ç—Ä–∞–Ω–∞", callback_data=f"admin_edit_field|{pid}|brand_country")
    b.button(text="üñºÔ∏è –§–æ—Ç–æ: –∑–∞–º–µ–Ω–∏—Ç—å", callback_data=f"admin_edit_photo|{pid}")
    b.button(text="üßπ –§–æ—Ç–æ: —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_edit_clear_photo|{pid}")
    b.adjust(1)
    b.button(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"admin_item|{pid}")
    kb = b.as_markup()
    txt = (
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:\n"
        f"–ê—Ä—Ç–∏–∫—É–ª: <b>{html.escape(r['article'] or '')}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{html.escape(r['name'] or '')}</b>\n"
        f"–õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è: <b>{html.escape(r['local_name'] or '‚Äî')}</b>\n"
        f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å/—Å—Ç—Ä–∞–Ω–∞: <b>{html.escape(r['brand_country'] or '‚Äî')}</b>"
    )
    try:
        await cb.message.edit_text(txt, reply_markup=kb, parse_mode=ParseMode.HTML)
    except Exception:
        await cb.message.answer(txt, reply_markup=kb, parse_mode=ParseMode.HTML)
    await cb.answer()


@router.callback_query(F.data.startswith("admin_edit_field|"))
async def admin_edit_field(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    _, pid_s, field = cb.data.split("|", 2)
    pid = int(pid_s)
    fields = {
        "article": "–∞—Ä—Ç–∏–∫—É–ª",
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "local_name": "–ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è",
        "brand_country": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å/—Å—Ç—Ä–∞–Ω–∞",
    }
    if field not in fields:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ", show_alert=True)
        return
    await state.set_state(botmod.AdminEdit.wait_text)
    await state.update_data(pid=pid, field=field)
    await cb.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´{fields[field]}¬ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await cb.answer()


@router.message(AdminEdit.wait_text, F.text)
async def admin_edit_save_text(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminEdit.wait_text.state:
        return
    if not botmod.is_admin(m.from_user.id, m.from_user.username):
        await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
        return
    data = await state.get_data()
    pid = int(data.get("pid"))
    field = data.get("field")
    value = (m.text or "").strip()
    if not value:
        await m.answer("–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.")
        return
    if field == "article" and not botmod._looks_like_article(value):
        await m.answer("–ê—Ä—Ç–∏–∫—É–ª –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    conn = botmod.db()
    try:
        with conn:
            if field == "article":
                conn.execute("UPDATE product SET article=? WHERE id=?", (value, pid))
            elif field == "name":
                conn.execute("UPDATE product SET name=? WHERE id=?", (value, pid))
                conn.execute("UPDATE stock SET name=? WHERE product_id=?", (value, pid))
            elif field == "local_name":
                conn.execute("UPDATE product SET local_name=? WHERE id=?", (value, pid))
                conn.execute("UPDATE stock SET local_name=? WHERE product_id=?", (value, pid))
            elif field == "brand_country":
                conn.execute("UPDATE product SET brand_country=? WHERE id=?", (value, pid))
    except Exception:
        conn.close()
        await m.answer("–¢–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        return
    finally:
        conn.close()
    await m.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É", callback_data=f"admin_item|{pid}")]]
        ),
    )
    await state.clear()


@router.callback_query(F.data.startswith("admin_edit_photo|"))
async def admin_edit_photo(cb: CallbackQuery, state: FSMContext):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    _, pid_s = cb.data.split("|", 1)
    pid = int(pid_s)
    await state.set_state(botmod.AdminEdit.wait_photo)
    await state.update_data(pid=pid)
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª).")
    await cb.answer()


@router.message(AdminEdit.wait_photo, F.photo)
async def admin_edit_save_photo(m: Message, state: FSMContext):
    import marm_bot as botmod
    st = await state.get_state()
    if st != botmod.AdminEdit.wait_photo.state:
        return
    if not botmod.is_admin(m.from_user.id, m.from_user.username):
        await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
        return
    data = await state.get_data()
    pid = int(data.get("pid"))
    file_id = m.photo[-1].file_id if m.photo else None
    rel_path = None
    try:
        if file_id:
            rel_path = await botmod._download_and_compress_photo(m.bot, file_id, pid)
    except Exception:
        rel_path = None
    conn = botmod.db()
    with conn:
        conn.execute(
            "UPDATE product SET photo_file_id=?, photo_path=? WHERE id=?",
            (file_id, rel_path, pid),
        )
    conn.close()
    await m.answer(
        "–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É", callback_data=f"admin_item|{pid}")]]
        ),
    )
    await state.clear()


@router.callback_query(F.data.startswith("admin_edit_clear_photo|"))
async def admin_edit_clear_photo(cb: CallbackQuery):
    import marm_bot as botmod
    if not await botmod.require_admin(cb):
        return
    _, pid_s = cb.data.split("|", 1)
    pid = int(pid_s)
    conn = botmod.db()
    with conn:
        conn.execute(
            "UPDATE product SET photo_file_id=NULL, photo_path=NULL WHERE id=?",
            (pid,),
        )
    conn.close()
    await cb.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
    await admin_edit_menu(cb)
